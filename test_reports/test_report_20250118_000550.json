{
  "timestamp": "20250118_000550",
  "total_tests": 6,
  "failures": 1,
  "errors": 0,
  "run_time": 0.11802816390991211,
  "test_results": [
    {
      "name": "private.config.templates.test_suite.TestTemplateSystem.test_capability_inheritance",
      "status": "success",
      "time": 0.01215052604675293
    },
    {
      "name": "private.config.templates.test_suite.TestTemplateSystem.test_config_backup_restore",
      "status": "success",
      "time": 0.018589258193969727
    },
    {
      "name": "private.config.templates.test_suite.TestTemplateSystem.test_config_manager_initialization",
      "status": "success",
      "time": 0.009697914123535156
    },
    {
      "name": "private.config.templates.test_suite.TestTemplateSystem.test_config_updates",
      "status": "success",
      "time": 0.018439531326293945
    },
    {
      "name": "private.config.templates.test_suite.TestTemplateSystem.test_config_validation",
      "status": "success",
      "time": 0.009473562240600586
    },
    {
      "name": "private.config.templates.test_suite.TestTemplateSystem.test_test_generation",
      "status": "failure",
      "time": 0.04672384262084961,
      "error": {
        "type": "AssertionError",
        "message": "'class TestTestAgent(unittest.TestCase):' not found in '# Template for private/config/templates/test_agent.py.template\\n\\n\"\"\"\\nTests for TestAgent Agent\\n\\nThis test suite is automatically generated based on the agent\\'s configuration\\nand its capabilities. It includes tests for capability initialization,\\nparameter validation, requirement verification, and inheritance relationships.\\n\"\"\"\\n\\nimport unittest\\nfrom typing import Dict, Any, List\\nfrom unittest.mock import patch, MagicMock\\nfrom agents.testagent.agent import TestAgentAgent\\nfrom core.exceptions import CapabilityError, ConfigurationError\\n\\nclass TestTestAgentAgent(unittest.TestCase):\\n    \"\"\"Test cases for TestAgent Agent\"\"\"\\n    \\n    def setUp(self):\\n        \"\"\"Set up test cases\"\"\"\\n        self.agent = TestAgentAgent()\\n        self.initialized = self.agent.initialize()\\n        \\n    def tearDown(self):\\n        \"\"\"Clean up after tests\"\"\"\\n        if self.initialized:\\n            self.agent.cleanup()\\n            \\n    def test_initialization(self):\\n        \"\"\"Test agent initialization\"\"\"\\n        self.assertTrue(self.initialized)\\n        self.assertIsNotNone(self.agent.capabilities)\\n        self.assertIsNotNone(self.agent.config)\\n        \\n    def test_capability_loading(self):\\n        \"\"\"Test that all required capabilities are loaded\"\"\"\\n        expected_capabilities = [\\'base_development\\', \\'code_generation\\']\\n        for capability in expected_capabilities:\\n            self.assertIn(capability, self.agent.capabilities)\\n            self.assertTrue(self.agent.has_capability(capability))\\n            \\n    def test_capability_requirements(self):\\n        \"\"\"Test that all capability requirements are met\"\"\"\\n        for name, capability in self.agent.capabilities.items():\\n            self.assertIsNotNone(capability.requirements)\\n            for requirement in capability.requirements:\\n            with self.subTest(capability=name, requirement=requirement.name):\\n                self.assertTrue(\\n                    self.agent.check_requirement(requirement.name, requirement.type),\\n                    f\"Requirement \\'{requirement.name}\\' (type: {requirement.type}) not met for capability \\'{name}\\'\"\\n                )\\n                    \\n    def test_capability_parameters(self):\\n        \"\"\"Test that all capability parameters are properly configured\"\"\"\\n        for name, capability in self.agent.capabilities.items():\\n            self.assertIsNotNone(capability.parameters)\\n            self.assertIsNotNone(capability._resolved_parameters)\\n            with self.subTest(capability=name):\\n                self.assertDictEqual(\\n                    capability._resolved_parameters,\\n                    self.agent.get_capability_parameters(name)\\n                )\\n                \\n    def test_capability_inheritance(self):\\n        \"\"\"Test capability inheritance relationships\"\"\"\\n        inheritance_map = {\\'base_code_operations\\': None, \\'base_development\\': None, \\'code_generation\\': \\'base_code_operations\\'}\\n        for capability_name, parent_name in inheritance_map.items():\\n            with self.subTest(capability=capability_name):\\n                capability = self.agent.capabilities[capability_name]\\n                if parent_name:\\n                    self.assertEqual(capability.parent, parent_name)\\n                    parent = self.agent.capabilities[parent_name]\\n                    # Verify parameter inheritance\\n                    for key, value in parent._resolved_parameters.items():\\n                        self.assertIn(key, capability._resolved_parameters)\\n                    # Verify requirement inheritance\\n                        for parent_req in parent.requirements:\\n                            inherited = any(\\n                                req.name == parent_req.name and req.type == parent_req.type\\n                                for req in capability.requirements\\n                            )\\n                            self.assertTrue(\\n                                inherited,\\n                                f\"Inherited requirement \\'{parent_req.name}\\' (type: {parent_req.type}) not found in \\'{capability_name}\\'\"\\n                            )\\n                        \\n    def test_capability_execution(self):\\n        \"\"\"Test execution of each capability\"\"\"\\n        test_tasks = {\\'base_code_operations\\': [{\\'type\\': \\'test\\'}], \\'base_development\\': [{\\'type\\': \\'test\\'}], \\'code_generation\\': [{\\'type\\': \\'test\\'}]}\\n        for capability_name, tasks in test_tasks.items():\\n            capability = self.agent.capabilities[capability_name]\\n            for task in tasks:\\n                with self.subTest(capability=capability_name, task=task):\\n                    result = capability.execute(task)\\n                    self.assertEqual(result[\\'status\\'], \\'success\\')\\n                    \\n    def test_error_handling(self):\\n        \"\"\"Test error handling in capabilities\"\"\"\\n        error_test_cases = {\\'base_code_operations\\': [{\\'name\\': \\'invalid_parameters\\', \\'method\\': \\'execute\\', \\'error_msg\\': \\'Invalid parameters provided\\', \\'task\\': {\\'invalid\\': \\'task\\'}}, {\\'name\\': \\'missing_black_requirement\\', \\'method\\': \\'check_requirement\\', \\'error_msg\\': \"Requirement \\'black\\' (type: package) not met\", \\'task\\': {\\'type\\': \\'basic\\'}}], \\'base_development\\': [{\\'name\\': \\'invalid_parameters\\', \\'method\\': \\'execute\\', \\'error_msg\\': \\'Invalid parameters provided\\', \\'task\\': {\\'invalid\\': \\'task\\'}}, {\\'name\\': \\'missing_pydantic_requirement\\', \\'method\\': \\'check_requirement\\', \\'error_msg\\': \"Requirement \\'pydantic\\' (type: package) not met\", \\'task\\': {\\'type\\': \\'basic\\'}}, {\\'name\\': \\'missing_PyYAML_requirement\\', \\'method\\': \\'check_requirement\\', \\'error_msg\\': \"Requirement \\'PyYAML\\' (type: package) not met\", \\'task\\': {\\'type\\': \\'basic\\'}}], \\'code_generation\\': [{\\'name\\': \\'invalid_parameters\\', \\'method\\': \\'execute\\', \\'error_msg\\': \\'Invalid parameters provided\\', \\'task\\': {\\'invalid\\': \\'task\\'}}, {\\'name\\': \\'missing_autopep8_requirement\\', \\'method\\': \\'check_requirement\\', \\'error_msg\\': \"Requirement \\'autopep8\\' (type: package) not met\", \\'task\\': {\\'type\\': \\'basic\\'}}, {\\'name\\': \\'parent_not_found\\', \\'method\\': \\'initialize\\', \\'error_msg\\': \"Parent capability \\'base_code_operations\\' not found\", \\'task\\': {\\'type\\': \\'basic\\'}}]}\\n        for capability_name, test_cases in error_test_cases.items():\\n            capability = self.agent.capabilities[capability_name]\\n            for test_case in test_cases:\\n                with self.subTest(capability=capability_name, case=test_case[\\'name\\']):\\n                    with patch.object(capability, test_case[\\'method\\']) as mock_method:\\n                        mock_method.side_effect = Exception(test_case[\\'error_msg\\'])\\n                        result = capability.execute(test_case[\\'task\\'])\\n                        self.assertEqual(result[\\'status\\'], \\'error\\')\\n                        self.assertIn(test_case[\\'error_msg\\'], result[\\'message\\'])\\n                        \\n    \\n    def test_base_code_operations_capability(self):\\n        \"\"\"Test base_code_operations capability\"\"\"\\n        capability = self.agent.capabilities[\"base_code_operations\"]\\n        self.assertIsNotNone(capability)\\n        \\n        # Test parameters\\n        self.assertIn(\\'code_style\\', capability.parameters)\\n        self.assertIn(\\'documentation_style\\', capability.parameters)\\n        \\n        # Test requirements\\n        self.assertTrue(\\n            self.agent.check_requirement(\\'black\\', \\'package\\'),\\n            f\"Requirement \\'black\\' (type: package) not met\"\\n        )\\n        \\n        # Test execution\\n        result = capability.execute({\"type\": \"test\"})\\n        self.assertEqual(result[\"status\"], \"success\")\\n\\n    def test_base_development_capability(self):\\n        \"\"\"Test base_development capability\"\"\"\\n        capability = self.agent.capabilities[\"base_development\"]\\n        self.assertIsNotNone(capability)\\n        \\n        # Test parameters\\n        self.assertIn(\\'templates_path\\', capability.parameters)\\n        \\n        # Test requirements\\n        self.assertTrue(\\n            self.agent.check_requirement(\\'pydantic\\', \\'package\\'),\\n            f\"Requirement \\'pydantic\\' (type: package) not met\"\\n        )\\n        self.assertTrue(\\n            self.agent.check_requirement(\\'PyYAML\\', \\'package\\'),\\n            f\"Requirement \\'PyYAML\\' (type: package) not met\"\\n        )\\n        \\n        # Test execution\\n        result = capability.execute({\"type\": \"test\"})\\n        self.assertEqual(result[\"status\"], \"success\")\\n\\n    def test_code_generation_capability(self):\\n        \"\"\"Test code_generation capability\"\"\"\\n        capability = self.agent.capabilities[\"code_generation\"]\\n        self.assertIsNotNone(capability)\\n        \\n        # Test parameters\\n        self.assertIn(\\'testing_framework\\', capability.parameters)\\n        \\n        # Test requirements\\n        self.assertTrue(\\n            self.agent.check_requirement(\\'autopep8\\', \\'package\\'),\\n            f\"Requirement \\'autopep8\\' (type: package) not met\"\\n        )\\n        \\n        # Test execution\\n        result = capability.execute({\"type\": \"test\"})\\n        self.assertEqual(result[\"status\"], \"success\")\\n    \\nif __name__ == \\'__main__\\':\\n    unittest.main()\\n'"
      }
    }
  ]
}
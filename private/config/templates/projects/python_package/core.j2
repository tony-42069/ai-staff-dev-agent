"""Core functionality for {{ project_name }}."""
from typing import Any, Dict, List, Optional, Union
import logging

logger = logging.getLogger(__name__)

class Example:
    """Example class demonstrating package functionality."""

    def __init__(self, config: Optional[Dict[str, Any]] = None) -> None:
        """
        Initialize Example class.

        Args:
            config: Optional configuration dictionary
        """
        self.config = config or {}
        self._initialize()

    def _initialize(self) -> None:
        """Initialize internal state."""
        logger.debug("Initializing Example instance")
        self.state: Dict[str, Any] = {}

    def run(self, params: Optional[Dict[str, Any]] = None) -> str:
        """
        Run the example.

        Args:
            params: Optional parameters for the run

        Returns:
            Result message
        """
        logger.info("Running example with params: %s", params)
        return f"Hello from {self.__class__.__name__}!"

    def process_data(
        self, 
        data: Union[List[Any], Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        Process input data.

        Args:
            data: Input data to process

        Returns:
            Processed data results

        Raises:
            ValueError: If data format is invalid
        """
        if not data:
            raise ValueError("Input data cannot be empty")

        logger.debug("Processing data: %s", data)
        
        try:
            # Example processing
            if isinstance(data, list):
                return {
                    "type": "list",
                    "count": len(data),
                    "sample": data[:3] if len(data) > 3 else data
                }
            elif isinstance(data, dict):
                return {
                    "type": "dict",
                    "keys": list(data.keys()),
                    "sample": dict(list(data.items())[:3])
                }
            else:
                raise ValueError(f"Unsupported data type: {type(data)}")
                
        except Exception as e:
            logger.error("Error processing data: %s", e)
            raise

    def cleanup(self) -> None:
        """Clean up resources."""
        logger.debug("Cleaning up Example instance")
        self.state.clear()

    def __enter__(self) -> 'Example':
        """Context manager entry."""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb) -> None:
        """Context manager exit."""
        self.cleanup()

def main() -> None:
    """Main function for command line usage."""
    logging.basicConfig(level=logging.INFO)
    
    example = Example()
    result = example.run()
    print(result)

if __name__ == "__main__":
    main()
